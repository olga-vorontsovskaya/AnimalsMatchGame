using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;

namespace MatchGame
{
    using System.Windows.Threading;
    
    public partial class MainWindow : Window
    {
        DispatcherTimer timer = new DispatcherTimer();
        int tenthsOfSecondsElapsed;
        int matchesFound;
        public MainWindow()
        {
            InitializeComponent();

            timer.Interval = TimeSpan.FromSeconds(.1);
            timer.Tick += Timer_Tick;
            SetUpGame();
        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            tenthsOfSecondsElapsed++;
            timeTextBlock.Text = (tenthsOfSecondsElapsed / 10F).ToString("0.0s");
            if (matchesFound == 8)
            {
                timer.Stop();
                timeTextBlock.Text = timeTextBlock.Text + " - Play again?";
            }
        }

        private void SetUpGame()
        {
            List<string> animalEmoji = new List<string>() /// Изображения животных через встроенные эмодзи Windows - создание списка из 8 пар эмодзи
            {
                "🐙","🐙",
                "🦁","🦁",
                "🐍","🐍",
                "🐘","🐘",
                "🐶","🐶",
                "🐱","🐱",
                "🦜","🦜",
                "🐬","🐬",
            };
            Random random = new Random(); /// Случайная выборка пар животных в конструкторе, используя эмодзи-изображения вместо TextBlock
            foreach (TextBlock textBlock in mainGrid.Children.OfType<TextBlock>()) /// Повтор нижеприведённых команд для каждого элемента TextBlock из сетки
            {
                if (textBlock.Name != "timeTextBlock") /// Пропуск элемента textBlock с именем timeTextBlock
                {
                textBlock.Visibility = Visibility.Visible; /// Отображение элемента textBlock
                int index = random.Next(animalEmoji.Count); /// Выбирает случайного числа от 0 до кол-ва эмодзи в списке (16) и назначает ему имя index
                string nextEmoji = animalEmoji[index]; /// Использует случайное число с именем index, чтобы получить случайный эмодзи из списка
                textBlock.Text = nextEmoji; /// Обновление элемента TextBlock случайным эмодзи из списка
                animalEmoji.RemoveAt(index); /// Удаляет случайный эмодзи из списка 
                }

            }
            timer.Start();
            tenthsOfSecondsElapsed = 0;
            matchesFound = 0; /// Запуск таймера и сброс содержимого полей
            
        }


        TextBlock lastTextBlockClicked; /// Метод для обработки щелчка по животному (элементу TextBlock)
        bool findingMatch = false; /// Если игрок щёлкнул по первому животному в паре, то ищет под него соответствующую пару
        private void TextBlock_MouseDown(object sender, System.Windows.Input.MouseButtonEventArgs e) /// Клик мышью, generated by IDE from XAML
        {
         
            {
                TextBlock textBlock = sender as TextBlock;
                if (findingMatch == false) /// Скрывает изображение первого животного в паре после щелчка мышью по нему
                {
                    textBlock.Visibility = Visibility.Hidden;
                    lastTextBlockClicked = textBlock;
                    findingMatch = true;
                }
                else if (textBlock.Text == lastTextBlockClicked.Text) /// Если пара найдена успешно игроком, то и второе животное в паре становится невидимым, 
                /// а findingMatch сбрасывается, чтобы стартовать выбор следующей пары
                {
                    matchesFound++; /// Значение matchesFound увеличивается с каждой успешно найденной парой.
                    textBlock.Visibility = Visibility.Hidden;
                    findingMatch = false;
                }
                else
                {
                    lastTextBlockClicked.Visibility = Visibility.Visible; /// Если игрок щёлкнул по животному, которое не совпадает с первым выбранным, и пару составить не удалось.
                    /// Первое животное снова становится видимым, а findingMatch снова сбрасывается, чтобы начать подбор пар зверей заново.
                    findingMatch = false;
                }
            }
        }

        private void TimeTextBlock_MouseDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            if (matchesFound == 8) /// Сбрасывает игру, если все 8 пар успешно найдены
            {
                SetUpGame();
            }
        }
    }
}
